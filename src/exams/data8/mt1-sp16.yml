course: 'data8'
ref: 'mt1-sp16'

type: 'mt1'
term: 'sp16'
prof: 'DeNero'
md: true

questions: {
  'q1': 'Expressions',
  'q2': 'Tables',
  'q3': 'Distributions',
  'q4': 'Predictions',
}

parts: {
  'q1': 6,
  'q2': 5,
  'q3': 9,
  'q4': 4,
}

q1_1: |
  # 1. (12 points) Expressions
  **(a) (10 pt)** An array of integers named ca contains the (estimated) population of California every 10 years.
  It has 11 items. The first item is the population of California in 1900. The last is the population in 2000.
  <hr class="s2" />
  `array ([ 1485053 , 2377549 , 3426861 , ... , 23667902 , 29760021 , 33871648])`
  <hr class="s2" />
  **Write a Python expression below each of the following descriptions that computes its value.**
  <hr class="s1" />
  The first one is provided as an example. Do not include numbers above (e.g., 1485053) in your solutions.
  <hr class="s2" />
  * The population in 1900
  <hr class="s1" />
  &nbsp;&nbsp;&nbsp;&nbsp;`ca.item(0)`
  <hr class="s1" />
  * The population change from 1940 to 1960, expressed as a number of persons (not a proportion).

q1_1_s: |
  `ca.item(6) - ca.item(4)`

q1_2: |
  Whether the population ever grew by less than 500000 in a decade represented by `ca`. (*True* or *False*)

q1_2_s: |
  `np.any(np.diff(ca) < 500000) or min(np.diff(ca)) < 500000`

q1_3: |
  The *annual* (yearly) growth rate from 1920 to 1930.

q1_3_s: |
  `(ca.item(3)/ca.item(2)) ** (1/10) - 1`

q1_4: |
  The population in 1924, assuming a fixed exponential annual growth rate from 1920 to 1930. *You may use the name `g` for the annual growth rate from 1920 to 1930 (computed above).*

q1_4_s: |
  `ca.item(2) * (1+g)**4`

q1_5: |
  The number of items in `ca` that are at least twice as large as the population in 1960.

q1_5_s: |
  `np.count_nonzero(ca >= 2 * ca.item(6))`

q1_6: |
  **(b) (2 pt)**
  You have 1000 different shirts in your huge closet.
  Each morning, you pick one uniformly at random, wear it,
  then put it back at night. Write a Python expression to
  compute the chance that, during a 30-day month, there is
  at least one shirt that you wear two or more times.
  (Call the fashion police!)

q1_6_s: |
  `1-np.prod(1-np.arange(30)/1000)`

q2_1: |
  # 2. (10 points) Tables
  **(a) (2 pt)** The table named `twins` has a row for each pair of twins that contains the height of each twin in
  inches. The following code computes the average absolute difference in heights among the twins.
  <hr class="s2" />
  ```
  def diff( height1, height2 ):
  &nbsp;&nbsp;&nbsp;&nbsp;return abs( height1 - height2 )
  diffs = Table( [’Absolute Differences’] )
  for i in np.arange( twins.num_rows ):
  &nbsp;&nbsp;&nbsp;&nbsp;diffs.append([diff(twins.column(0).item(i), twins.column(1).item(i))])
  np.mean( diffs.column(0) )
  ```
  <hr class="s2" />
  Complete the expression below to compute the same result without calling diff or using a for statement.
  <hr class="s2" />
  `np.mean( ___________ )`

q2_1_s: |
  <code>np.mean( **np.abs(twins.column(0) - twins.column(1))** )</code>

q2_2: |
  **(b) (8 pt)** Each row of the `trip` table from lecture describes a single bicycle rental in the San Francisco area. Durations are integers representing times in seconds. The first three rows out of `338343` appear below.
  <hr class="s2" />

  | Start                       | End                     | Duration |
  |-----------------------------|-------------------------|----------|
  | Ferry Building              | SF Caltrain             | 765      |
  | San Antonio Shopping Center | Mountain View City Hall | 1036     |
  | Post at Kearny              | 2nd at South Park       | 307      |

  <hr class="s2" />
  Write a Python expression below each of the following descriptions that computes its value.
  The first one is provided for you. You *may* use up to two lines and introduce variables.
  <hr class="s1" />
  * The average duration of a rental. `total_duration = sum(trip.column(2))`
    <hr class="s1" />
    `total_duration / trip.num_rows`
    <hr class="s1" />
  * The number of rentals that started at the SF Caltrain station.

q2_2_s: |
  `trip.where(0, ’SF Caltrain’).num_rows`

q2_3: |
  * The average duration for rentals that started and ended at different stations.

q2_3_s: |
  `np.average(trip.where(trip.column(0) != trip.column(1)).column(2))`

q2_4: |
  * The name of the station where the most rentals ended (assume no ties).

q2_4_s: |
  `trip.group(’End’).sort(’count’, descending=True).column(0).item(0)`

q2_5: |
  * The number of stations for which the average duration ending at that station was at least 300 seconds.

q2_5_s: |
  `np.count_nonzero(trip.select([1, 2]).group(0, np.mean).column(1) >= 300)`

q3_1: |
  # 3. (15 points) Distributions
  The two histograms of bike trip durations below were both generated by `trip.hist(...)` using different bins.
  <hr class="s2" />
  ![Histograms of bike trip durations](/img/data8mt1sp16-3.png)
  <hr class="s2" />
  **(a) (8 pt)** Write the proportion of trips that fall into each range of durations below. *Show your work*. If it
  is not possible to tell from the histograms, instead write **Not enough information**.
  <hr class="s1" />
  * Between 200 (inclusive) and 400 (exclusive) seconds

q3_1_s: |
  $$0.0015 * 200 == 0.30 \text{ or } 30%$$

q3_2: |
  * Between 300 (inclusive) and 900 (exclusive) seconds.

q3_2_s: |
  $$0.0014 \* 300 + 0.0008 \* 300 == 0.66 \text{ or } 66%$$

q3_3: |
  * Between 400 (inclusive) and 900 (exclusive) seconds.

q3_3_s: |
  $$0.0014 \* 200 + 0.0008 \* 300 == 0.52 \text{ or } 52%$$

q3_4: |
  * Between 200 (inclusive) and 300 (exclusive) seconds.

q3_4_s: |
  $0.0015 \* 200 + 0.0014 \* 200 - 0.0014 \* 300 == 0.16 \text{ or } 16%$

  Alternatively: $0.0007 \* 300 - 0.0003 \* 200 == 0.15 \text{ or } 15%$

q3_5: |
  **(b) (4 pt)**
  Frank Underwood conducts a poll to estimate what proportion of voters approve of his America
  Works program. He found that the voters he polled give the program an average grade of 6.5 out of 10,
  and the Standard Deviation in the grades is 1.5.
  <hr class="s1" />
  * No matter how the distribution of grades looks, what is the maximum proportion of those polled that could have given the program a grade lower than 2 according to Chebyshev’s inequality?

q3_5_s: |
  At most, 1/9 could be giving a grade lower than a 2, because at least 8/9 fall between 2 and 11.

q3_6: |
  * If the distribution is symmetrical and has a bell shape just like the normal distribution, about what proportion of those polled gave the program a grade lower than 2?

q3_6_s: |
  About 0.14%, by the normal distribution, which is symmetric.

q3_7: |
  **(c) (3 pt)**
  A study followed 369 people with cardiovascular disease, randomly selected from hospital patients.
  A year later, those who owned a dog were four times more likely to be alive than those who didn’t.
  <hr class="s1" />
  * Circle *True* or *False*: This study is a randomized controlled experiment.

q3_7_s: |
  **False**; the experimenters did not control who owned a dog.

q3_8: |
  * Circle *True* or *False*: This study shows that dog owners live longer than cat owners on average.

q3_8_s: |
  **False**; the experiment compares those who owned a dog to those who didn’t (no mention of cats)

q3_9: |
  * Circle *True* or *False*: This study shows that for someone with cardiovascular disease, adopting a dog will probably cause them to live longer.

q3_9_s: |
  **False**; an observational study does not show causation.

q4_1: |
  # 4. (8 points) Predictions
  The `ball` table contains player data for some of the Golden State Warriors. Only the first five rows are shown.
  <hr class="s2" />

  | Player        | Minutes per Game | Points per Game |
  |---------------|------------------|-----------------|
  | Klay Thompson | 34               | 21              |
  | Andrew Bogut  | 20               | 5               |
  |Stephen Curry  | 34               | 29              |
  |James McAdoo   | 4                | 3               |
  |Andre Iguodala | 28               | 7               |

  <hr class="s2" />
  You have computed the following summary statistics from the full `ball` table.
  <hr class="s2" />

  | Expression | Value |
  |------------|-------|
  |`np.average(ball.column(1))`| 24|
  |`np.std(ball.column(1))`| 10 |
  |`np.average(ball.column(2))`| 13 |
  |`np.std(ball.column(2))`| 8 |
  |`correlation(ball, 1, 2)`| 0.75 |

  <hr class="s2" />
  **(a) (6 pt)** For each question below, answer with a number. You may show your work for partial credit.

  * What is the value of Stephen Curry’s points per game in standard units?

q4_1_s: |
  $ (29-13) / 8 == 2 $

q4_2: |
  * What is the slope of the regression line when the points per game are plotted on the vertical axis, the minutes per game are plotted on the horizontal axis, and a regression line is fit to the data? That’s the slope of the regression line computed by `slope(ball, 1, 2)` in original units, $\frac{points}{minute}$. *The `slope` function is defined on the last page of the midterm study guide.*

q4_2_s: |
  $0.75 \* 8/10 == 0.6$

q4_3: |
  * What is the fitted value for Stephen Curry using this regression line to estimate his points per game from his minutes per game?

q4_3_s: |
  $(34-24)/10 \* 0.75 \* 8 + 13 == 19$

q4_4: |
  **(b) (2 pt)** How would the fitted value of points per game for a player who played 34 minutes per game change
  if Stephen Curry were removed from the table and the regression line recomputed? *Circle one.*
  <hr class="s1" />
  (a) Increase
  <hr class="s1" />
  (b) Decrease
  <hr class="s1" />
  (c) Stay the same
  <hr class="s1" />
  (d) Not enough information

q4_4_s: |
  **(b) Decrease**
  <hr class="s1" />
  Since the regression line minimizes the sum of squared errors, and Stephen Curry’s squared error is positive at $ x = 34 $ minutes, removing this term from the objective function would result in a smaller fitted value.
