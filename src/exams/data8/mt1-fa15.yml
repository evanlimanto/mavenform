course: 'data8'
ref: 'mt1-sp15'

type: 'mt1'
term: 'sp15'
prof: 'Adhikari'

questions: {
  'q1': '',
  'q2': '',
  'q3': '',
  'q4': '',
  'q5': '',
  'q6': '',
  'q7': ''
}

parts: {
  'q1': 2,
  'q2': 1,
  'q3': 2,
  'q4': 2,
  'q5': 1,
  'q6': 1,
  'q7': 2,
  'q8': 2
}

q1_1: |
  **1.** The list **cards** contains credit card numbers. Each element is a 16-digit integer; for example,
  "**1234567891011121**"" and not "**1234 5678 9101 1121**".

  a) Write a Python expression that evaluates to the total number of cards in the list.

q1_1_s: |
  `len(cards)`

q1_2: |
  b) Define a function **last_four** that takes a 16-digit integer card number as its input and returns
  the output "**Card ending in XYZW**" where XYZW are the last four digits of the card number. For
  example, **last_four(1234567891011121)** should return "**Card ending in 1121**".

q1_2_s: |
  ```
  def last_four(n):

    return "Card ending in " + str(n)[-4:]
  ```

q2_1: |
  **2.** The histogram below represents data from a population of 10,000 incomes. The incomes are measured
  in thousands of dollars. Note that some bars on the left and right ends of the histogram are too small
  to be visible on the scale of the figure.

  <p align="center">![Histogram of all incomes in the population](/img/data8/mt1-fa15-q2-1.png)</p>

  Page 2 of this exam contains six empirical histograms based on samples drawn uniformly at random
  with replacement from the population of incomes above.

  Match each description in the list below with the number of the appropriate histogram on Page 2.

  Explain your choices briefly.

  <hr class="s2" />
  **A**: empirical distribution of the incomes in a sample of size 100.

  **B**: empirical distribution of the smallest income in a sample of size 100, based on 2000 replications
  of the sampling process.

  **C**: empirical distribution of the incomes in a sample of size 600.
  <hr class="s2" />
  ### Empirical histograms for Problem 2
  <p align="center">![6 Empirical Histograms](/img/data8/mt1-fa15-q2-2.png)</p>

q2_1_s: |
  **A: 2; B: 4; C: 5**

  **A and C**: The empirical histogram of a large random sample looks like the population; bigger samples
  look more like the population than smaller ones do.

  **B**: The minimum of 100 random draws will be pretty small, certainly not balancing to the right of 50 as
  the rest of the histograms are.

q3_1: |
  **3.** The histogram of the population of incomes in Problem 2 is displayed again here for ease of reference.
  It shows the distribution of 10,000 incomes measured in thousands of dollars.

  <p align="center">![Histogram of all incomes in the population](/img/data8/mt1-fa15-q2-1.png)</p>

  **a)** The values of the incomes are contained in an array called **incomes**. The list of four numbers
  below consists of the results of the calls **np.median(incomes)**, **np.mean(incomes)**, and **np.std(incomes)**,
  as well as an irrelevant number, in scrambled order. Which is which, and why?

  (i) 5.01

  (ii) 26.71

  (iii) 56.11

  (iv) 60.07

q3_1_s: |
  **mean: 60.07; &nbsp;median: 56.11; &nbsp;SD: 26.71**

  The histogram won’t balance at 26 or below.
  Because of the right hand tail, the mean will be bigger than the median, so the mean is 60.07 and the median is 56.11.
  Chebychev says that “mean plus or minus 2 SDs” includes at least 75% of the data, which rules out 5.01 as a candidate for the SD.
  So the SD is 26.71.

q3_2: |
  **b)** The histogram of **incomes** is redrawn, still to the density scale but this time with dierent bins.
  Here are the bins and the heights of the bars. Show the calculation that will compute the missing
  height; leave all the arithmetic unsimplied.
  <hr class="s2" />

  |bin (thousands of dollars)                  | 0 - 20 | 20 - 40 | 40 - 70 | 70 - 100 | 100 - 200|
  |--------------------------------------------|--------|---------|---------|----------|----------|
  |**height (proportion per thousand dollars)**| 0.0013 | 0.0108  |         | 0.0077   | 0.0015   |

q3_2_s: |
  Total area of the bars other than 40-70:

  0.0013 \* (20 − 0) + 0.0108 \* (40 − 20) + 0.0077 \* (100 − 70) + 0.0015 \* (200 − 100) = A, say.

  Height of missing bar: (1 − A)/(70 − 40)

q4_1: |
  **4.** The class Data Science 1A has several discussion sections. The instructor maintains her records in
  a table called **students**. The table has one row for each student in the class, and several columns. The
  column labeled **SID** contains the student ID number, and the column **year** contains the year in school
  (freshman, sophomore, junior, or senior). The GSIs also have a table with one row per student. This
  table is called **sections** and has many columns. The column **ID** contains the SID number, the column
  section contains the section number, and the column **Q4** contains the score on Quiz 4.
  <hr class="s2" />
  **a)** Write **one line** of code that constructs a table that has one row for every student, and columns
  **SID**, **year**, **section**, and **Q4** containing the corresponding data; your code should assign the table to
  the name **ds1a**. It is fine for the table to have more columns than the ones listed here.

q4_1_s: |
  `ds1a = students.join(’SID’, sections, ’ID’)`

q4_2: |
  **b)** Write **one line** of code that uses **pivot** to produce a table that has rows corresponding to the
  years and columns corresponding to the sections. For a given year and section, the body of the table
  should contain the highest Quiz 4 score of students in that year in that section. You are free to use any
  of the tables **students, sections, and ds1a** in your code.

q4_2_s: |
  `ds1a.pivot(’section’, ’year’, ’Q4’, np.max)`

q5_1: |
  **5.** If possible, define a function **conclusion2** that takes one numerical input and returns the conclusion
  of any statistical test that has a P -value equal to the input and a cuto of 2%. Specically, for an input
  in the range [0, 1], the function should treat the input as a P -value and return the appropriate one of
  the two strings **"the data support the null"** and the **"data don't support the null"** depending
  on the relation between the input and the cuto. For an input outside the range [0, 1], the function
  should return the string **"not a P-value"**.
  <hr class="s2" />
  If you feel that it is not possible to define such a function without knowing what kind of test is being
  performed, explain why not.

q5_1_s: |
  ```
  def conclusion2(p):

    CUTOFF = .02

    if 0 <= p and p <= CUTOFF:

        return "the data don’t support the null"

    elif CUTOFF < p and p <= 1:

        return "the data support the null"

    else:

        return "not a P-value"
  ```

q6_1: |
  ### Questions 6-8 are based on the description below.
  <hr class="s2" />
  A cereal company places a small plastic toy inside each box of its cereal. The toy could be a bear, a
  ladybug, a car, or a dinosaur. Customers are encouraged to buy the cereal and collect these toys. If a
  customer has all four dierent kinds of toys, he/she gets a prize.
  <hr class="s2" />
  **Assumptions of randomness**. Each box is equally likely to contain any of the four kinds of toys,
  regardless of what is in the other boxes.
  <hr class="s2" />
  **6.** Suppose you buy four boxes of this cereal. Find the chance that you do not get the prize. Leave all
  the arithmetic unsimplied.

q6_1_s: |
  1 − (4/4) \* (3/4) \* (2/4) \* (1/4)

q7_1: |
  **7.** The calculation in Problem 6 is based on the assumptions about randomness that are stated above.
  To test these assumptions, suppose that you buy 100 boxes of the cereal, and get 27 bears, 20 ladybugs,
  21 cars, and 32 dinosaurs. Use these data to set up a test of whether the assumptions are valid, as
  follows.

  **a)** State the null hypothesis as a precise statement about chances.

q7_1_s: |
  In each cereal box, the chance of each kind of toy is 1/4, regardless of what is in the other boxes.

q7_2: |
  **b)** Choose an appropriate test statistic (no explanations needed). Suppose you are going to perform
  a test of the null hypothesis by repeated sampling. Write **one line** of code that evaluates to **just one**
  value of your chosen test statistic generated by simulating the toys in 100 cereal boxes under appropriate
  assumptions.

q7_2_s: |
  `0.5*(sum(abs(np.random.multinomial(100, [.25]*4)/100 - 0.25)))`

q8_1: |
  **8 (continuing Problem 7)**. Suppose you use the test statistic you chose in Problem 7b to perform a
  test of whether the data support the null hypothesis of Problem 7a.
  <hr class="s2" />
  Fill in the blanks with the appropriate choice from the list of terms below or with a numerical range.
  Examples of numerical ranges are "6.8 to 10.1", "10.1 or less", "more than 6.8", etc. No explanations
  are needed for your choices of terms, but if you use a numerical range, please show your calculations.
  <hr class="s2" />

  - null
  - alternative
  - empirical distribution
  - probability distribution
  - proportion
  - probability
  - test statistic
  - exact
  - approximate
  - P-value

  <hr class="s2" />
  **a)** The P -value is the probability, assuming that the<u>(i)</u> hypothesis is true, of getting a <u>(ii)</u> in the range <u>(iii)</u>.

q8_1_s: |
  (i) &nbsp;&nbsp;null

  (ii) &nbsp;test statistic

  (iii) 0.09 or more, where 0.09 comes from a calculation of the TVD, which we used in problem 7b: 0.5 ∗ (|0.27 − 0.25| + |0.2 − 0.25| + |0.21 − 0.25| + |0.32 − 0.25|)
  
q8_2: |
  **b)** By running 3000 repetitions of simulating the toys in 100 cereal boxes, under the
  <u>(iv)</u>
  hypothesis, an
  <u>(v)</u>
  P -value can be obtained based on the
  <u>(vi)</u>
  of the test statistic.

q8_2_s: |
  (iv) null

  (v) &nbsp;approximate

  (vi) empirical distribution